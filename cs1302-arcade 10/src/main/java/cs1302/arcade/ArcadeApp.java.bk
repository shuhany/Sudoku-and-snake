
package cs1302.arcade;

import java.util.Random;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.input.KeyCode;
import javafx.stage.Stage;
import javafx.scene.layout.HBox;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.scene.control.Button;
import javafx.scene.text.Text;
import javafx.scene.input.MouseEvent;
import javafx.scene.control.Label;
import javafx.stage.Modality;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import java.lang.Integer;
import java.time.LocalTime;
import javafx.animation.Timeline;
import javafx.animation.KeyFrame;
import javafx.util.Duration;
import javax.swing.*;
import javafx.scene.Group;  




public class ArcadeApp extends Application {

    Random rng = new Random();
    int scoreNum = 0;
    int row, col;
    GridPane playArea;
    Button[] numbers = new Button[]{
                                         new Button("1"), new Button("2"), new Button("3"),
                                         new Button("4"), new Button("5"), new Button("6"),
                                         new Button("7"), new Button("8"), new Button("9")
        };//buttons for people to use to play game
    Button[][] playNumbers;//buttons in the game field
    int[][][] board;
    Label score;
    GridPane buttonField;
    Timeline timeline;
    @Override
    public void start(Stage stage) {

	HBox hbox = new HBox();           // main container
	Button snake = new Button("SNAKE");
	Button sudoku = new Button("SUDOKU");
        hbox.getChildren().addAll(snake,sudoku);
	hbox.setMargin(snake,new Insets(10));
	hbox.setMargin(sudoku,new Insets(10));
	sudoku.setOnAction( e -> playSudoku() );
	snake.setPadding(new Insets(30));
	sudoku.setPadding(new Insets(30));
	hbox.setAlignment(Pos.CENTER);
        Scene scene = new Scene(hbox, 300, 200);
        stage.setTitle("cs1302-arcade!");
        stage.setScene(scene);
	stage.sizeToScene();
        stage.show();
	
	
    } // start



    /**
     *
     * This Method is to play Sudoku game.
     *
     */
    private void playSudoku(){
	HBox h = new HBox();//to contain vbox and gridpane.
	playArea = new GridPane();
	playNumbers = new Button[9][9];
	setInitial();//make the basic board
	setInitialBoard();
	VBox v = new VBox();//to contain score and number buttons.
	score = new Label( "Score: " + scoreNum);
	buttonField = new GridPane();
	int count = 0;
	for(int i = 0; i < 3; i++){
		for (int j = 0; j < 3; j++){
			buttonField.add(numbers[count],j,i);
			setPlayArea(count, row, col);
			count++;
		}
	}
	setScore();
	setGridStyle();
	v.getChildren().addAll(score, buttonField);
	v.setMargin(score, new Insets(40));
	h.getChildren().addAll(playArea, v);
	h.setMargin(playArea,new Insets(20));
	Stage sudokuStage = new Stage();
	sudokuStage.initModality(Modality.APPLICATION_MODAL);
	Scene sudokuScene = new Scene(h,500,400);
	sudokuStage.setTitle("SUDOKU");
	sudokuStage.setScene(sudokuScene);
	sudokuStage.sizeToScene();
	sudokuStage.setOnCloseRequest( e -> {
		timeline.stop();
	});
	sudokuStage.show();
    }//playSudoku

    /**
     *This is to set all values in the play board.
     *
     */	
    private void setInitialBoard(){
	int random = rng.nextInt(3);
	for(int i = 0; i < 9; i++){
	        for (int j = 0; j < 9; j++){
                        playNumbers[i][j] = new Button(Integer.toString(board[random][i][j]));
                        playNumbers[i][j].setStyle("-fx-background-color: #A78732;");
                }//for
        }//for
        for(int i = 0; i < 30; i++){
                playNumbers[rng.nextInt(9)][rng.nextInt(9)].setText("  ");
        }
        for(int i = 0; i < 9; i++){
                for (int j = 0; j < 9; j++){
                        playArea.add(playNumbers[i][j],i,j);
                        if (playNumbers[i][j].getText()=="  "){
                             setRowAndCol(i,j);
                             playNumbers[i][j].setStyle( "-fx-background-color: #DFB951;");
                        }
                }
        }
    }

    /**
     *This is to keep track of time so people have score.
     *
     */  
    private void setScore(){
	long startTime = System.currentTimeMillis();
        KeyFrame keyFrame = new KeyFrame(Duration.seconds(0.5), e -> {
                score.setText("Score: " + (System.currentTimeMillis()-startTime)/1000.00);

        });
        timeline = new Timeline();
        timeline.setCycleCount(Timeline.INDEFINITE);
        timeline.getKeyFrames().add(keyFrame);
        timeline.play();
     }

    /**
     *This is for styling in Grid pane.
     */
     private void setGridStyle(){
        playArea.setStyle(
                 "-fx-control-inner-background; "
                + "-fx-background-insets: 2, 2; " 
                + "-fx-padding: 4; "
                + "-fx-grid-lines-visible: true;");
        buttonField.setStyle(
		 "-fx-control-inner-background; "
                + "-fx-background-insets: 2, 2; "
                + "-fx-padding: 4; "
                + "-fx-grid-lines-visible: true;");
	playArea.setAlignment(Pos.CENTER);
        buttonField.setAlignment(Pos.CENTER);

     }
    /**
     *      
     *This method is for set row and column.
     *                
     */
    private void setRowAndCol(int i, int j){
	playNumbers[i][j].setOnAction(event -> {
               row = i;
               col = j;
	      // System.out.println(playNumbers[i][j].getText());
               
	});

    }
    
    /**
     *
     * This is the complete sudoku.
     */
    
    private void setInitial(){
	board = new int[][][] { 
			{ {3,1,6,5,2,4,8,7,9}, {9,5,8,7,1,3,4,2,6}, {2,4,7,6,8,9,1,3,5},
			  {5,3,1,4,9,2,6,8,7}, {8,2,9,1,7,6,5,4,3}, {7,6,4,3,5,8,2,9,1},
			  {1,9,5,8,4,7,3,6,2}, {4,7,3,2,6,5,9,1,8}, {6,8,2,9,3,1,7,5,4} },
			{ {7,1,2,9,8,4,3,5,6}, {5,3,4,1,6,7,2,8,9}, {9,6,8,3,5,2,7,1,4},
			  {2,8,1,5,3,9,6,4,7}, {6,7,3,2,4,1,5,9,8}, {4,5,9,6,7,8,1,2,3},
			  {8,4,5,7,2,6,9,3,1}, {1,2,6,4,9,3,8,7,5}, {3,9,7,8,1,5,4,6,2} },
			{ {2,1,8,7,5,3,4,9,6}, {4,3,6,2,9,1,8,5,7}, {9,7,5,4,6,8,3,2,1},
			  {1,9,4,6,3,2,7,8,5}, {8,5,2,1,7,9,6,3,4}, {3,6,7,5,8,4,2,1,9},
			  {5,4,1,8,2,6,9,7,3}, {7,8,3,9,4,5,1,6,2}, {6,2,9,3,1,7,5,4,8} }
		};
    }	

    /**
     *This is to check if it's a completed sudoku.
     */
    private boolean checkWin(){
            for(int i = 0;i < 9;i++){
                    for(int j = 0; j < 9;j++){
                            if(playNumbers[i][j].getText() == "  "){
                                return false;
                            }
                    }
            }//too check if it's full
	    for(int i = 0;i < 9;i++){
            	if(!(checkRow(i)&&checkCol(i))){
			return false;
		}
		
	    }//i
	    for(int i = 0; i < 3; i++){
		for(int j = 0; j < 3; j++){
			if(!(checkSquare(i*3,j*3))){
                        	return false;
                	}
		}
	    }
        return true;
    }
  
    /**
     *This is to check if every number is contained in row r.
     */
    private boolean checkRow(int r){
        boolean hasNum = false;
	for(int num = 1; num < 10; num++){
		for(int c = 0; c < 9; c++){
			if(playNumbers[r][c].getText().equals(Integer.toString(num))){
				hasNum = true;
			}
		}
		if (!hasNum){
			return false;
		}
	}
	return true;
    }

   /**
    * This is to check if every number is contained in col c.
    */
   private boolean checkCol(int c){
        boolean hasNum = false;
        for(int num = 1; num < 10; num++){
                for(int r = 0; r < 9; r++){
                        if(playNumbers[r][c].getText().equals(Integer.toString(num))){
                                hasNum = true;
                        }
                }
                if (!hasNum){
                        return false;
                }
        }
        return true;
    }

    /**
     *This is the check the 3x3 square.
     */		
    private boolean checkSquare(int r, int c){
	boolean hasNum = false;
	for(int num = 1; num < 10; num++){
	    for(int k = r; k < r+3; k++){
         	for(int l = c; l < c+3; l++){
                	if(playNumbers[k][l].getText().equals(Integer.toString(num))){
                                hasNum = true;
                        }
                }
	    }               
            if (!hasNum){           
                   return false;
            }//if

	}//for
	return true;
    }
    /**
     *
     *This method is for set Text to the right place.
     *
     */
    private void setPlayArea(int count, int row, int col){
	numbers[count].setOnAction(e -> {
		int[] rowAndCol = getRowAndCol();
		int row1 = rowAndCol[0];
		int col1 = rowAndCol[1];
		playArea.getChildren().remove(playNumbers[row1][col1]);
		playNumbers[row1][col1].setText(String.valueOf(count+1));
		playArea.add(playNumbers[row1][col1],row1,col1);
		//System.out.println("count= " +count+"row= " +row1 +" col= "+col1);
		if(checkWin()){
			Label win = new Label("Congratulations!!!");
			Scene winScene = new Scene(win, 300, 200);
			Stage winStage = new Stage();
        		winStage.setTitle("win message");
        		winStage.setScene(winScene);
        		winStage.sizeToScene();
        		winStage.show();			
		}
	});
    }    
    /**
     *This is to return row and col.
     */
    public int[] getRowAndCol(){
	int[] rowAndCol = {row,col};
	return rowAndCol;
    }

    public static void main(String[] args) {
	try {
	    Application.launch(args);
	} catch (UnsupportedOperationException e) {
	    System.out.println(e);
	    System.err.println("If this is a DISPLAY problem, then your X server connection");
	    System.err.println("has likely timed out. This can generally be fixed by logging");
	    System.err.println("out and logging back in.");
	    System.exit(1);
	} // try
    } // main

} // ArcadeApp

